MCU := atmega16
TARGET := MetalDetector

# Optimization level, can be [0, 1, 2, 3, s]. 0 turns off optimization.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT := s
FORMAT := ihex
F_CPU := 16000000UL

SRC := main.c
SRC += leds.c
SRC += pulse.c
SRC += gain.c
SRC += sh.c
SRC += adc.c
SRC += uart.c
SRC += timer.c
SRC += ac.c
SRC += pwm.c

HEADER := leds.h
HEADER += pulse.h
HEADER += gain.h
HEADER += sh.h
HEADER += adc.h
HEADER += uart.h
HEADER += timer.h
HEADER += ac.h
HEADER += pwm.h

# TODO: Try hardware/crypto/MD5_asm.S
# List Assembler source files here.
ASRC := 

# List any extra directories to look for include files here.
EXTRAINCDIRS := 

# Optional compiler flags.
#  -g:        generate debugging information (for GDB, or for COFF conversion)
#  -O*:       optimization level
#  -f...:     tuning, see gcc manual and avr-libc documentation
#  -Wall...:  warning level
#  -Wa,...:   tell GCC to pass this to the assembler.
#    -ahlms:  create assembler listing
CFLAGS := -O$(OPT)
CFLAGS += -ggdb3
CFLAGS += -funsigned-char
CFLAGS += -funsigned-bitfields
CFLAGS += -fpack-struct
CFLAGS += -fshort-enums
CFLAGS += -Wall
CFLAGS += -Wstrict-prototypes
CFLAGS += -fno-strict-aliasing
CFLAGS += -Wa,-adhlns=$(<:.c=.lst)
CFLAGS += -DF_CPU=$(F_CPU)

$(patsubst %,-I%,$(EXTRAINCDIRS))

CFLAGS += -std=gnu99
# CFLAGS += -mmcu=attiny13

# Optional assembler flags.
ASFLAGS := -Wa,-adhlns=$(<:.S=.lst),-gstabs 

# Optional linker flags.
# Previous: LDFLAGS := -Wl,-Map=$(TARGET).map,--cref
#  -Wl,...:   tell GCC to pass this to linker.
#  -Map:      create map file
#  --cref:    add cross reference to  map file
# LDFLAGS := -Wl,-u,vfprintf,-lprintf_flt,-Map=$(TARGET).map,--cref
LDFLAGS := 

# Additional libraries
LDFLAGS += -lm

# Define programs and commands.
SHELL := sh
CC := avr-gcc
OBJCOPY := avr-objcopy
OBJDUMP := avr-objdump
SIZE := avr-size
REMOVE := rm -f
COPY := cp

HEXSIZE := $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE := $(SIZE) --mcu=$(MCU) -C $(TARGET).elf

# Define Messages
# English
MSG_ERRORS_NONE := Firmware compiled successfully!
MSG_BEGIN := Starting build...
MSG_END := --------  Done  --------
MSG_SIZE_BEFORE := Size before: 
MSG_SIZE_AFTER := Size after:
MSG_COFF := Converting to AVR COFF:
MSG_EXTENDED_COFF := Converting to AVR Extended COFF:
MSG_FLASH := Creating load file for Flash:
MSG_EEPROM := Creating load file for EEPROM:
MSG_EXTENDED_LISTING := Creating Extended Listing:
MSG_SYMBOL_TABLE := Creating Symbol Table:
MSG_LINKING := Linking:
MSG_COMPILING := Compiling:
MSG_ASSEMBLING := Assembling:
MSG_CLEANING := Cleaning project:

# Define all object files.
OBJ := $(SRC:.c=.o) $(ASRC:.S=.o) 

# Define all listing files.
LST := $(ASRC:.S=.lst) $(SRC:.c=.lst)

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS := -mmcu=$(MCU) -I. $(CFLAGS)
ALL_ASFLAGS := -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)



# Default target: make program!
#all: begin gccversion sizebefore $(TARGET).elf $(TARGET).hex $(TARGET).eep \
#	$(TARGET).lss $(TARGET).sym sizeafter finished end

all: begin $(TARGET).elf $(TARGET).hex $(TARGET).eep \
	$(TARGET).lss $(TARGET).sym cleanup sizeafter finished
#	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM)

# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
	@echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
sizebefore:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi
# 	@if [ -f $(TARGET).hex ]; then echo; echo $(MSG_SIZE_BEFORE); $(HEXSIZE); echo; fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; $(ELFSIZE); echo; fi
# 	@if [ -f $(TARGET).hex ]; then echo; $(HEXSIZE); echo; fi



# Display compiler version information.
gccversion : 
	@$(CC) --version




# Convert ELF to COFF for use in debugging / simulating in
# AVR Studio or VMLAB.
COFFCONVERT:=$(OBJCOPY) --debugging \
	--change-section-address .data-0x800000 \
	--change-section-address .bss-0x800000 \
	--change-section-address .noinit-0x800000 \
	--change-section-address .eeprom-0x810000 


coff: $(TARGET).elf
#	@echo
#	@echo $(MSG_COFF) $(TARGET).cof
	@$(COFFCONVERT) -O coff-avr $< $(TARGET).cof


extcoff: $(TARGET).elf
#	@echo
#	@echo $(MSG_EXTENDED_COFF) $(TARGET).cof
	@$(COFFCONVERT) -O coff-ext-avr $< $(TARGET).cof


# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
#	@echo
#	@echo $(MSG_FLASH) $@
	@$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep: %.elf
	@echo
#	@echo $(MSG_EEPROM) $@
#	@echo Not generating any EEPROM images
#	@-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" --change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
%.lss: %.elf
#	@echo
#	@echo $(MSG_EXTENDED_LISTING) $@
	@$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
%.sym: %.elf
#	@echo
#	@echo $(MSG_SYMBOL_TABLE) $@
	@avr-nm -n $< > $@



# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	@echo $(MSG_LINKING) $@
	@echo $(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)
	@$(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)


# Compile: create object files from C source files.
%.o : %.c
	@echo $(MSG_COMPILING) $<
	@echo $(CC) -c $(ALL_CFLAGS) $< -o $@
	@$(CC) -c $(ALL_CFLAGS) $< -o $@ > t.S


# Compile: create assembler files from C source files.
%.s : %.c
	@$(CC) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files.
%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	@$(CC) -c $(ALL_ASFLAGS) $< -o $@


# Target: clean project.
clean: clean_list finished

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(TARGET).hex
	$(REMOVE) $(TARGET).eep
	$(REMOVE) $(TARGET).obj
	$(REMOVE) $(TARGET).cof
	$(REMOVE) $(TARGET).elf
	$(REMOVE) $(TARGET).map
	$(REMOVE) $(TARGET).lst
	$(REMOVE) $(TARGET).o
	$(REMOVE) $(TARGET).a90
	$(REMOVE) $(TARGET).sym
	$(REMOVE) $(TARGET).lnk
	$(REMOVE) $(TARGET).lss
	$(REMOVE) $(OBJ)
	$(REMOVE) $(LST)
	$(REMOVE) $(SRC:.c=.s)
	$(REMOVE) $(SRC:.c=.d)
	$(REMOVE) *~

cleanup:
	@$(REMOVE) $(SRC:.c=.s)
	@$(REMOVE) $(SRC:.c=.d)
	@$(REMOVE) $(LST)

# Automatically generate C source code dependencies. 
# (Code originally taken from the GNU make user manual and modified 
# (See README.txt Credits).)
#
# Note that this will work with sh (bash) and sed that is shipped with WinAVR
# (see the SHELL variable defined above).
# This may not work with other shells or other seds.
#
%.d: %.c
	@set -e; $(CC) -MM $(ALL_CFLAGS) $< \
	| sed 's,\(.*\)\.o[ :]*,\1.o \1.d : ,g' > $@; \
	[ -s $@ ] || rm -f $@

# Remove the '-' if you want to see the dependency files generated.
-include $(SRC:.c=.d)

# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion coff extcoff \
	clean clean_list program

# ###############################################################################
# # Makefile for the project charger
# ###############################################################################
# 
# ## General Flags
# TARGET := $(TARGET)
# # AS := avra
# AS := avr-as
# CC := avr-gcc
# LD := avr-ld
# OD := avr-objdump
# OC := avr-objcopy
# # TERM := lxterminal
# TERM := terminator
# SIZE := avr-size
# 
# # Define Messages
# # English
# MSG_ERRORS_NONE = Errors: none
# MSG_BEGIN = -------- begin --------
# MSG_END = -------- end --------
# MSG_SIZE_BEFORE = Size before:
# MSG_SIZE_AFTER = Size after:
# MSG_COFF = Converting to AVR COFF:
# MSG_EXTENDED_COFF = Converting to AVR Extended COFF:
# MSG_FLASH = Creating load file for Flash:
# MSG_EEPROM = Creating load file for EEPROM:
# MSG_EXTENDED_LISTING = Creating Extended Listing:
# MSG_SYMBOL_TABLE = Creating Symbol Table:
# MSG_LINKING = Linking:
# MSG_COMPILING = Compiling C:
# MSG_COMPILING_CPP = Compiling C++:
# MSG_ASSEMBLING = Assembling:
# MSG_CLEANING = Cleaning project:
# MSG_CREATING_LIBRARY = Creating library:
# 
# ## Source files
# ASRC := 
# 
# ## Includes
# INCLUDES :=
# 
# ## C specific flags
# # CFLAGS := --coff
# # CFLAGS += -m $(TARGET).map
# # CFLAGS += -l $(TARGET).lst
# # CFLAGS += --listmac
# # CFLAGS := -mmcu=attiny13
# # CFLAGS := -mmcu atmega8535
# # CFLAGS += -ggdb3
# 
# ## Assembly specific flags
# # ASMFLAGS := --coff
# # ASMFLAGS += -m $(TARGET).map
# # ASMFLAGS += -l $(TARGET).lst
# # ASMFLAGS += --listmac
# ASMFLAGS := -mmcu attiny13
# # ASMFLAGS := -mmcu atmega8535
# ASMFLAGS += -ggdb3
# 
# ## Linker specific flags
# LDFLAGS :=
# 
# 
# ## Build
# all: sizebefore ctags $(TARGET).lst $(TARGET).hex sizeafter
# 
# 
# ## Make hex
# $(TARGET).hex: $(TARGET).elf
# 	$(OC) -j .text -j .data -O ihex $< $@
# 
# 
# ## Make lst
# $(TARGET).lst: $(TARGET).elf
# 	$(OD) -D $< > $@
# 
# 
# ## Compile
# $(TARGET).o: $(SRC)
# 	@echo $(MSG_COMPILING) $<
# 	$(CC) $(INCLUDES) $(CFLAGS) -o $@ $<
# 
# 
# ## Link
# $(TARGET).elf: $(TARGET).o
# 	$(LD) $(LDFLAGS) -o $@ $<
# 	$(OD) -h -S -z $@ > $(TARGET).lss

ctags: $(SRC) $(HEADER) $(ASRC)
	ctags $^


# # Display size of file.
# HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
# ELFSIZE = $(SIZE) --mcu=$(MCU) --format=avr $(TARGET).elf
# 
# 
# sizebefore:
# 	if test -f $(TARGET).elf; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); \
# 	2>/dev/null; echo; fi
# 
# 
# sizeafter:
# 	if test -f $(TARGET).elf; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); \
# 	2>/dev/null; echo; fi


vim:
	@echo vim $(SRC) $(HEADER) $(TARGET).map $(TARGET).lss Makefile


simavr:
	simavr -m attiny13 -f $(F_CPU) -g ch1.hex &


simulavr:
# 	$(TERM) -e "simulavr -d at90s1200 -c 1600000 -g -P simulavr-disp"
	$(TERM) -e "simulavr -d at90s4433 -F $(F_CPU) -g -p 1234"


disassembler: $(TARGET).hex
	avr-objdump -m avr1 -D $(TARGET).hex > $(TARGET)_d.asm


gdb: $(TARGET).elf
	$(TERM) -e "avr-gdb -q -x commands.gdb"


ddd: $(TARGET).elf
	$(TERM) -e "ddd --debugger avr-gdb -q -x commands.gdb"


## Clean target
.PHONY: clean
clean:
	-rm -rf $(TARGET).obj $(TARGET).elf $(TARGET).hex $(TARGET).o $(TARGET).map $(TARGET).lst $(TARGET).lss


program: sizeafter $(TARGET).hex
	avrdude -p $(MCU) -c usbasp -U flash:w:$(TARGET).hex:i


fuses:
	avrdude -p $(MCU) -c usbasp -U efuse:w:0xff:m -U hfuse:w:0xd9:m -U lfuse:w:0xe2:m

# avr-as -mmcu=attiny13 ex1.S -o ex1.elf
# avr-objdump -D ex1.elf > ex1.lst
# avr-objcopy -j .text -j .data -O ihex ex1.elf ex1.hex
# sudo avrdude -p t13 -c stk500v2 -e -U flash:w:ex1.hex

